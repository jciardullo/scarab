<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>

  <arg name="ground_truth" default="true"/> <!-- publish ground truth tf tree -->
  <arg name="agent" default="husky"/>
  <arg name="laser" default="true"/>
  <arg name="frontier_exp" default="true" />
  <arg name="near_frontier" default="true" />
  <arg name="world" default="tutorial"/>

  <arg name="rank" default="true" if="$(arg frontier_exp)"/>
  <arg name="rank" default="false" unless="$(arg frontier_exp)"/>

  <arg name="explore_package" default="explore_lite" unless="$(arg near_frontier)" />
  <arg name="explore_package" default="explore_lite_near" if="$(arg near_frontier)" />

  <!-- tf args -->
  <arg name="base_frame"    default="$(arg agent)/base" />
  <arg name="odom_frame"    default="$(arg agent)/odom" />
  <arg name="map_frame"     default="$(arg agent)/map" />
  <arg name="ground_truth_frame" default="ground_truth/$(arg base_frame)"/>
  <arg name="world_frame"   default="world"/>
  <arg name="publish_world" default="true"/>

  <!-- start unity -->
  <include file="$(find arl_unity_ros_ground)/launch/simulator_with_husky.launch">
    <arg name="simulator_param_file" value="$(find scarab_unity)/config/$(arg world).yaml"/>
  </include>

  <!-- start rviz -->
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find scarab_unity)/launch/scarab.rviz" output="screen" unless="$(arg frontier_exp)"/>
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find scarab_unity)/launch/explore.rviz" output="screen" if="$(arg frontier_exp)"/>

  <!-- publish static transform between map_frame and odom_frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="map_static_tf_broadcaster"
        args="0 0 0 0 0 0 $(arg map_frame) $(arg odom_frame)"/>

  <!-- publish static transform between ground_truth_frame and map_frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="ground_static_tf_broadcaster"
        args="0 0 0 0 0 0 $(arg ground_truth_frame) $(arg map_frame)"
        if="$(arg publish_world)"/>

  <group ns="$(arg agent)">

    <!-- ground truth pose -->
    <node name="pose_stamped" pkg="hfn" type="tf_posestamped_node.py" >
      <param name="base_frame_id" value="$(arg base_frame)" />
      <param name="map_frame_id"  value="$(arg map_frame)" />
    </node>

    <!--hack to get laser frame correct
    <node pkg="tf2_ros"
          type="static_transform_publisher"
          name="base_static_tf_broadcaster"
          args="0 0 0 0 0 0 husky husky/scan"
          if="$(arg laser)"/> -->

    <!-- pointcloud to laserscan -->
    <arg name="node_start_delay" default="10.0" />
    <node name="cloud_to_laser" pkg="pointcloud_to_laserscan"
      type="pointcloud_to_laserscan_node"
      launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' " >
      <remap from="cloud_in" to="lidar_points" />
      <param name="range_max" value="100" />
      <param name="use_inf" value="false" />
    </node>

    <!-- convert rviz goal msg to action -->
    <node name="goal_to_action" pkg="hfn" type="goal_to_action.py">
      <remap from="goal" to="move_base_simple/goal" />
    </node>

    <!-- navigation via hfn -->
    <node name="hfn_navigation" pkg="hfn" type="hfn" output="screen">
      <remap from="odom" to="odometry/filtered"/>
      <param name="stop_on_preempt" value="false" />
      <param name="base_frame_id"      value="$(arg base_frame)"/>
      <param name="map_frame_id"       value="$(arg map_frame)" />
      <param name="cost_occ_prob"      value="0.7" />
      <param name="cost_occ_dist"      value="0.7" />
      <param name="max_occ_dist"       value="1.0" />
      <param name="lethal_occ_dist"    value="0.2" />
      <param name="axle_width"         value="0.6" />
      <param name="robot_radius"       value="0.5" />
      <param name="safety_margin"      value="0.05" />
      <param name="social_margin"      value="0.2" />
      <param name="goal_tolerance_ang" value=".05"/> <!--default 2pi-->
      <param name="goal_tolerance"     value=".05"/>     <!--default .2m-->
    </node>

    <!-- slam for localization -->
    <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
      <remap from="map_metadata" to="map_metadata"/>

      <param name="base_frame" value="$(arg base_frame)" />
      <param name="odom_frame" value="$(arg odom_frame)"/>
      <param name="map_frame"  value="$(arg map_frame)" />
      <param name="map_update_interval" value="1.0" />
    </node>

    <!-- start exploration -->
    <node pkg="$(arg explore_package)" type="explore" respawn="false" name="explore" output="screen" if="$(arg frontier_exp)">
      <remap from="move_base" to="move"/>
      <param name="robot_base_frame" value="$(arg base_frame)"/>
      <param name="costmap_topic" value="map"/>
      <param name="costmap_updates_topic" value="map_updates"/>
      <param name="visualize" value="true"/>
      <param name="planner_frequency" value="1.0"/>
      <param name="progress_timeout" value="30.0"/>
      <param name="potential_scale" value="3.0"/>
      <param name="orientation_scale" value="0.0"/>
      <param name="gain_scale" value="1.0"/>
      <param name="transform_tolerance" value="0.3"/>
      <param name="min_frontier_size" value="1"/>
    </node>

    <!-- start ranking node and load in truth map-->
    <node pkg="explore_rank" type="exploration_ranker_node" name="exploration_ranker" output="screen" if="$(arg rank)" launch-prefix="gnome-terminal --"/>
    <node pkg="map_server" type="map_server" name="map_loader" args="$(find explore_rank)/true_map.yaml" output="screen" if="$(arg rank)">
      <remap from="map" to="true_map"/>
    </node>
    <node pkg="rqt_plot" type="rqt_plot" name="rqt_plot" args="/husky/grid_total/data" if="$(arg rank)"/>

  </group>

</launch>
